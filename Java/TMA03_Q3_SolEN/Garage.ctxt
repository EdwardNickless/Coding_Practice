#BlueJ class context
comment0.target=Garage
comment0.text=\r\n\ Question\ 3(c)(i)\r\n\ \r\n\ Garage\ models\ a\ real\ world\ garage\ owned\ by\ a\ car\r\n\ rental\ company.\ The\ class\ includes\ methods\ for\r\n\ adding\ or\ removing\ cars,\ removing\ every\ car\ at\ once,\r\n\ updating\ details\ of\ cars,\ filtering\ the\ set\ of\ cars\r\n\ and\ printing\ the\ details\ of\ each\ car\ in\ the\ entire\ Garage.\r\n\r\n\ @author\ Edward\ Nickless\r\n\ @version\ 02.05.2022\r\n
comment1.params=
comment1.target=Garage()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Garage.\r\n\ Creates\ an\ empty\ TreeSet.\r\n
comment10.params=
comment10.target=void\ printMembers()
comment10.text=\r\n\ Using\ a\ loop,\ prints\ the\ whole\ TreeSet\ of\ Cars,\r\n\ one\ Car\ per\ line\ of\ output,\ stating\ the\ Brand,\ Model\ and\ Cost.\r\n\ Prints\ a\ blank\ line\ after\ the\ last\ Car.\r\n
comment2.params=
comment2.target=void\ clear()
comment2.text=\r\n\ Clears\ the\ cars\ TreeSet.\r\n
comment3.params=
comment3.target=void\ populate()
comment3.text=\r\n\ Question\ 3(c)(ii)\r\n\ \r\n\ Generates\ five\ example\ Car\ objects\ and\ adds\ them\r\n\ to\ the\ cars\ TreeSet.\r\n
comment4.params=filename
comment4.target=void\ writeCSVFile(java.lang.String)
comment4.text=\r\n\ Question\ 3(c)(iii)\r\n\ \r\n\ Writes\ the\ current\ list\ of\ cars\ to\ a\ CSV\ file.\r\n\ The\ file\ will\ be\ created\ if\ an\ existing\ file\ of\r\n\ the\ same\ name\ does\ not\ exist.\r\n\ \r\n\ @param\ filename\ A\ String\ containing\ the\ filename\ to\ be\ written\ to.\r\n\ @throws\ IOException\r\n
comment5.params=filename
comment5.target=void\ readCSVFile(java.lang.String)
comment5.text=\r\n\ Question\ 3(c)(iv)\r\n\ \r\n\ Reads\ from\ a\ given\ CSV\ file\ line\ by\ line.\r\n\ Generates\ a\ new\ instance\ of\ class\ Car\ for\ each\ line\r\n\ and\ gets\ the\ paramaters,\ in\ order,\ from\ each\r\n\ comma\ separated\ value.\r\n\ \r\n\ @param\ filename\ The\ name\ of\ the\ CSV\ file\ to\ be\ read\ from.\r\n
comment6.params=aCar
comment6.target=void\ addMember(Car)
comment6.text=\r\n\ Adds\ a\ Car\ to\ the\ cars\ TreeSet\ if\r\n\ it\ is\ not\ already\ present.\ Otherwise,\ prints\ an\r\n\ error\ message\ including\ the\ brand\ and\ model\ of\r\n\ which\ car\ could\ not\ be\ added.\r\n\ \r\n\ @param\ aCar\ The\ instance\ of\ Car\ to\ be\ added\ to\ cars.\r\n
comment7.params=aModel
comment7.target=boolean\ removeMember(java.lang.String)
comment7.text=\r\n\ Removes\ a\ Car\ from\ the\ cars\ TreeSet.\r\n\ Returns\ true\ if\ successful,\ false\ if\ not\ successful.\r\n\ \r\n\ @param\ aCar\ The\ model\ of\ the\ Car\ to\ be\ removed\ from\ cars.\r\n\ @return\ boolean\ Whether\ the\ remove\ operation\ has\ been\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ successful\ or\ not.\r\n
comment8.params=aModel\ isAvailable
comment8.target=void\ updateMember(java.lang.String,\ boolean)
comment8.text=\r\n\ Updates\ the\ availability\ for\ a\ given\ Car.\r\n\ \r\n\ @param\ aModel\ The\ model\ of\ the\ Car\ for\ which\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ availability\ is\ to\ be\ set.\r\n\ @param\ isAvailable\ Whether\ the\ Car\ is\ now\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ available\ or\ unavailable.\r\n
comment9.params=isAvailable
comment9.target=java.util.ArrayList\ selectMembers(boolean)
comment9.text=\r\n\ Returns\ an\ ArrayList\ of\ available\ or\ unavailable\ Cars.\r\n\ \r\n\ @param\ isAvailable\ boolean\ true\ for\ available,\ false\ for\ unavailable.\r\n
numComments=11
